// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IMPORTS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

parser code {:

	Logger log = Logger.getLogger(getClass());
	boolean errorDetected;
   
    // Redefined error handling methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
      errorDetected = true;
    }
  
    public void syntax_error(String message, Symbol cur_token) {
        report_error("\nSyntax error: " + message, cur_token);
        errorDetected = true;
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        errorDetected = true;
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
        errorDetected = true;
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	errorDetected = false;
:}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GRAMMAR ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




// ~~~~~~~~~~~~~~~~NONTERMINALS~~~~~~~~~~~~~~~~

nonterminal ProgramDeclListE ProgramDeclListE;
nonterminal MethodDeclListE MethodDeclListE;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDeclInnerList ConstDeclInnerList;
nonterminal VarDeclInnerList VarDeclInnerList;
nonterminal SquareBracketsOptional SquareBracketsOptional;
nonterminal ExtendsTypeOptional ExtendsTypeOptional;
nonterminal ClassBody ClassBody;
nonterminal VarDeclListE VarDeclListE;
nonterminal ClassConstructorsAndMethodsDeclOptional ClassConstructorsAndMethodsDeclOptional;
nonterminal ConstructorDeclListE ConstructorDeclListE;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal MethodReturnType MethodReturnType;
nonterminal FormParsOptional FormParsOptional;
nonterminal StatementListE StatementListE;
nonterminal FormPars FormPars;
nonterminal Statement Statement;
nonterminal MatchedStatement MatchedStatement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal Condition Condition;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ExprOptional ExprOptional;
nonterminal DesignatorAction DesignatorAction;
nonterminal DesignatorListOptionalES DesignatorListOptionalES;
nonterminal ActParsOptional ActParsOptional;
nonterminal Assignop Assignop;
nonterminal DesignatorList DesignatorList;
nonterminal ActPars ActPars;
nonterminal RelopExprOptional RelopExprOptional;
nonterminal Relop Relop;
nonterminal TermAddopList TermAddopList;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ParenActParsOptional ParenActParsOptional;
nonterminal NewTypeSuffix NewTypeSuffix;
//nonterminal Label;		// ADDITIONAL
nonterminal VarDeclGlobal VarDeclGlobal;
nonterminal VarDeclInnerListGlobal VarDeclInnerListGlobal;
nonterminal DesignatorAssignopExpr DesignatorAssignopExpr;
nonterminal StatementWhileStart StatementWhileStart;

nonterminal IfStatement IfStatement;
nonterminal ElseStatement ElseStatement;

// Everything that needs to go inside Tab
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, Const, ClassName, MethodName, Designator, MethodDecl, DesignatorArray, ForeachVarDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, PrintNumConstOptional, CondFact, CondTerm;

nonterminal ConstDeclInnerListElement ConstDeclInnerListElement;
nonterminal VarDeclInnerListElement VarDeclInnerListElement;
nonterminal FormParam FormParam;
nonterminal DesignatorOptional DesignatorOptional;
nonterminal ForeachStatement ForeachStatement;
nonterminal ConditionInIf ConditionInIf;
nonterminal DesignatorStatementAssignArrayStart DesignatorStatementAssignArrayStart;
nonterminal RelopComparison RelopComparison;
nonterminal RelopEquality RelopEquality;
nonterminal IfStatementStart IfStatementStart;
nonterminal ElseStatementStart ElseStatementStart;

nonterminal PlaceAfterIfCondition PlaceAfterIfCondition;
nonterminal PlaceAfterIfBlock PlaceAfterIfBlock;
nonterminal PlaceAfterElseBlock PlaceAfterElseBlock;

nonterminal ForeachStatementBeginning ForeachStatementBeginning;

nonterminal PlaceAfterFirstConditionInOr PlaceAfterFirstConditionInOr;
nonterminal PlaceAfterFirstConditionInAnd PlaceAfterFirstConditionInAnd;

// ~~~~~~~~~~~~~~~~TERMINALS~~~~~~~~~~~~~~~~

// Keywords
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOREACH;

// Operators
terminal PLUS, MINUS, MUL, DIV, MOD, EQUALS, NOT_EQUALS, GREATER, GREATER_EQUALS, LESS, LESS_EQUALS, AND, OR, ASSIGN;
terminal INC, DEC, SEMI_COLON, COLON, COMMA, DOT, L_PAREN, R_PAREN, L_SQUARE_BRACKET, R_SQUARE_BRACKET, L_BRACE, R_BRACE, ARROW;

// Token types
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;



// ~~~~~~~~~~~~~~~~~~~~~~ ADDITIONAL ~~~~~~~~~~~~~~~~~~~~~~

terminal ARRMAX, ARRSORT, LABEL, GOTO;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ArrMaxArrDesignator, ArrMaxVarDesignator, ArrSortArrDesignator, Label;

// ~~~~~~~~~~~~~~~~~~~~~~ /ADDITIONAL ~~~~~~~~~~~~~~~~~~~~~~



// ~~~~~~~~~~~~~~~~ PRECEDENCE ~~~~~~~~~~~~~~~~

precedence left ELSE;




// ~~~~~~~~~~~~~~~~ RULES ~~~~~~~~~~~~~~~~


// ~~~~~~~~~~~~~~~~~~~ PROGRAM ~~~~~~~~~~~~~~~~~~~

Program ::= (Program) PROGRAM ProgramName:programName ProgramDeclListE:P1 L_BRACE MethodDeclListE:M2 R_BRACE {: RESULT=new Program(programName, P1, M2); RESULT.setLine(programNameleft); :};

ProgramName ::= (ProgramName) IDENT:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};

ProgramDeclListE ::= (ProgramDeclListEConst) ProgramDeclListE:P1 ConstDecl:C2 {: RESULT=new ProgramDeclListEConst(P1, C2); RESULT.setLine(P1left); :}
				|
				(ProgramDeclListEVar) ProgramDeclListE:P1 VarDeclGlobal:V2 {: RESULT=new ProgramDeclListEVar(P1, V2); RESULT.setLine(P1left); :}
				|
				(ProgramDeclListEClass) ProgramDeclListE:P1 ClassDecl:C2 {: RESULT=new ProgramDeclListEClass(P1, C2); RESULT.setLine(P1left); :}
				|
				(ProgramDeclListEEmpty) {: RESULT=new ProgramDeclListEEmpty(); :} /* e */
				;
				
				
				
// ~~~~~~~~~~~~~~~~~~~ CONST DECL ~~~~~~~~~~~~~~~~~~~
				
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDeclInnerList:C2 SEMI_COLON {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstDeclInnerList ::= (ConstDeclInnerListSingle) ConstDeclInnerListElement:C1 {: RESULT=new ConstDeclInnerListSingle(C1); RESULT.setLine(C1left); :}
			|
			(ConstDeclInnerListMultiple) ConstDeclInnerList:C1 COMMA ConstDeclInnerListElement:C2 {: RESULT=new ConstDeclInnerListMultiple(C1, C2); RESULT.setLine(C1left); :}
			;

ConstDeclInnerListElement ::= (ConstDeclInnerListElement) IDENT:constName ASSIGN Const:C1 {: RESULT=new ConstDeclInnerListElement(constName, C1); RESULT.setLine(constNameleft); :};

Const ::= (ConstNum) NUM_CONST:value {: RESULT=new ConstNum(value); RESULT.setLine(valueleft); :}
		|
		(ConstBool) BOOL_CONST:value {: RESULT=new ConstBool(value); RESULT.setLine(valueleft); :}
		|
		(ConstChar) CHAR_CONST:value {: RESULT=new ConstChar(value); RESULT.setLine(valueleft); :}
		;
		
		
		
// ~~~~~~~~~~~~~~~~~~~ VAR DECL ~~~~~~~~~~~~~~~~~~~
		
VarDeclGlobal ::= (VarDeclGlobalExists) VarDecl:V1 {: RESULT=new VarDeclGlobalExists(V1); RESULT.setLine(V1left); :}
				|
				(VarDeclGlobalError) error:e 
					{: 
						parser.syntax_error("Globar var declaration error at line: " + eleft, null); 
						parser.log.info("Global var declaration error recovery successful."); 
					:} {: RESULT=new VarDeclGlobalError(); :}
				;

VarDecl ::= (VarDecl) Type:T1 VarDeclInnerList:V2 SEMI_COLON {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarDeclInnerList ::= (VarDeclInnerListSingle) VarDeclInnerListElement:V1 {: RESULT=new VarDeclInnerListSingle(V1); RESULT.setLine(V1left); :}
				|
				(VarDeclInnerListMultiple) VarDeclInnerList:V1 COMMA VarDeclInnerListElement:V2 {: RESULT=new VarDeclInnerListMultiple(V1, V2); RESULT.setLine(V1left); :}
				;
				
VarDeclInnerListElement ::= (VarDeclInnerListElementVar) IDENT:varName {: RESULT=new VarDeclInnerListElementVar(varName); RESULT.setLine(varNameleft); :}
						|
						(VarDeclInnerListElementArray) IDENT:varName L_SQUARE_BRACKET R_SQUARE_BRACKET {: RESULT=new VarDeclInnerListElementArray(varName); RESULT.setLine(varNameleft); :}
						;
						
VarDeclListE ::= (VarDeclListEExists) VarDeclListE:V1 VarDecl:V2 {: RESULT=new VarDeclListEExists(V1, V2); RESULT.setLine(V1left); :}
			|
			(VarDeclListEEmpty) {: RESULT=new VarDeclListEEmpty(); :} /* e */
			;

//VarDeclInnerListGlobal ::= (VarDeclInnerListGlobalSingle) IDENT SquareBracketsOptional
//				|
//				(VarDeclInnerListGlobalMultiple) VarDeclInnerListGlobal COMMA IDENT SquareBracketsOptional
//				|
//				(VarDeclInnerListGlobalError) error:e {: parser.report_error("Globar var declaration error at line: " + eleft, null); :}
//				;

//SquareBracketsOptional ::= (SquareBracketsOptionalExists) L_SQUARE_BRACKET R_SQUARE_BRACKET
//						|
//						(SquareBracketsOptionalEmpty) /* e */ 
//						;
					
					
					
						
			
// ~~~~~~~~~~~~~~~~~~~ CLASS DECL ~~~~~~~~~~~~~~~~~~~ // LEVEL C

ClassDecl ::= (ClassDecl) CLASS ClassName:className ExtendsTypeOptional:E1 L_BRACE ClassBody:C2 R_BRACE {: RESULT=new ClassDecl(className, E1, C2); RESULT.setLine(classNameleft); :};

ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ExtendsTypeOptional ::= (ExtendsTypeOptionalExists) EXTENDS Type:T1 {: RESULT=new ExtendsTypeOptionalExists(T1); RESULT.setLine(T1left); :}
					|
					(ExtendsTypeOptionalEmpty) {: RESULT=new ExtendsTypeOptionalEmpty(); :} /* e */
					|
					(ExtendsTypeOptionalError) error:e 
						{: 
							parser.syntax_error("Class extends type error at line: " + eleft, null); 
							parser.log.info("Class extends type error recovery successful."); 
						:} {: RESULT=new ExtendsTypeOptionalError(); :}
					;

ClassBody ::= (ClassBody) VarDeclListE:V1 ClassConstructorsAndMethodsDeclOptional:C2 {: RESULT=new ClassBody(V1, C2); RESULT.setLine(V1left); :};

ClassConstructorsAndMethodsDeclOptional ::= (ClassConstructorsAndMethodsDeclOptionalExists) L_BRACE /* ConstructorDeclListE */ MethodDeclListE:M1 R_BRACE {: RESULT=new ClassConstructorsAndMethodsDeclOptionalExists(M1); RESULT.setLine(M1left); :}
										|
										(ClassConstructorsAndMethodsDeclOptionalEmpty) {: RESULT=new ClassConstructorsAndMethodsDeclOptionalEmpty(); :} /* e */
										;

// Level C
//ConstructorDeclListE ::= (ConstructorDeclListEExists) ConstructorDeclListE ConstructorDecl
//						|
//						(ConstructorDeclListEEmpty) /* e */
//						;
//
//ConstructorDecl ::= (ConstructorDeclEmpty) /* e */; // Level C






// ~~~~~~~~~~~~~~~~~~~ METHOD DECL ~~~~~~~~~~~~~~~~~~~

MethodDeclListE ::= (MethodDeclListEExists) MethodDeclListE:M1 MethodDecl:M2 {: RESULT=new MethodDeclListEExists(M1, M2); RESULT.setLine(M1left); :}
				|
				(MethodDeclListEEmpty) {: RESULT=new MethodDeclListEEmpty(); :} /* e */
				;

MethodDecl ::= (MethodDecl) MethodReturnType:M1 MethodName:methodName L_PAREN FormParsOptional:F2 R_PAREN VarDeclListE:V3 L_BRACE StatementListE:S4 R_BRACE {: RESULT=new MethodDecl(M1, methodName, F2, V3, S4); RESULT.setLine(M1left); :};

MethodName ::= (MethodName) IDENT:MethodName {: RESULT=new MethodName(MethodName); RESULT.setLine(MethodNameleft); :};

MethodReturnType ::= (MethodReturnTypeHasType) Type:returnType {: RESULT=new MethodReturnTypeHasType(returnType); RESULT.setLine(returnTypeleft); :}
					|
					(MethodReturnTypeIsVoid) VOID {: RESULT=new MethodReturnTypeIsVoid(); :}
					;
					
FormParsOptional ::= (FormParsOptionalExists) FormPars:F1 {: RESULT=new FormParsOptionalExists(F1); RESULT.setLine(F1left); :}
					|
					(FormParsOptionalEmpty) {: RESULT=new FormParsOptionalEmpty(); :} /* e */
					;
					
FormPars ::= (FormParsSingle) FormParam:F1 {: RESULT=new FormParsSingle(F1); RESULT.setLine(F1left); :}
			|
			(FormParsMultiple) FormPars:F1 COMMA FormParam:F2 {: RESULT=new FormParsMultiple(F1, F2); RESULT.setLine(F1left); :}
			|	
			(FormParsError) error:e 
				{: 
					parser.syntax_error("Formal parameter declaration error at line: " + eleft, null); 
					parser.log.info("Formal parameter declaration error recovery successful."); 
				:} {: RESULT=new FormParsError(); :}
			;
			
FormParam ::= (FormParamVar) Type:type IDENT:paramName {: RESULT=new FormParamVar(type, paramName); RESULT.setLine(typeleft); :}
			|
			(FormParamArray) Type:type IDENT:paramName L_SQUARE_BRACKET R_SQUARE_BRACKET {: RESULT=new FormParamArray(type, paramName); RESULT.setLine(typeleft); :}
			;
			
			

// ~~~~~~~~~~~~~~~~~~~ TYPE ~~~~~~~~~~~~~~~~~~~

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

StatementListE ::= (StatementListEExists) StatementListE:S1 Statement:S2 {: RESULT=new StatementListEExists(S1, S2); RESULT.setLine(S1left); :}
				|
				(StatementListEEmpty) {: RESULT=new StatementListEEmpty(); :} /* e */
				;
				
				
				
				
// ~~~~~~~~~~~~~~~~~~~ STATEMENTS ~~~~~~~~~~~~~~~~~~~
				
Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMI_COLON {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(StatementIfElse) IfStatement:I1 ElseStatement:E2 {: RESULT=new StatementIfElse(I1, E2); RESULT.setLine(I1left); :}
			|
			(StatementIf) IfStatement:I1 {: RESULT=new StatementIf(I1); RESULT.setLine(I1left); :}
			|
			(StatementWhile) StatementWhileStart:S1 L_PAREN Condition:C2 R_PAREN Statement:S3 {: RESULT=new StatementWhile(S1, C2, S3); RESULT.setLine(S1left); :}
			|
			(StatementBreak) BREAK SEMI_COLON {: RESULT=new StatementBreak(); :}
			|
			(StatementContinue) CONTINUE SEMI_COLON {: RESULT=new StatementContinue(); :}
			|
			(StatementForeach) ForeachStatement:F1 SEMI_COLON {: RESULT=new StatementForeach(F1); RESULT.setLine(F1left); :}
			|
			(StatementReturnExpr) RETURN Expr:E1 SEMI_COLON {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
			|
			(StatementReturnVoid) RETURN SEMI_COLON {: RESULT=new StatementReturnVoid(); :}
			|
			(StatementRead) READ L_PAREN Designator:D1 R_PAREN SEMI_COLON {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			|
			(StatementPrint) PRINT L_PAREN Expr:E1 PrintNumConstOptional:P2 R_PAREN SEMI_COLON {: RESULT=new StatementPrint(E1, P2); RESULT.setLine(E1left); :}
			|
			(StatementSection) L_BRACE StatementListE:S1 R_BRACE {: RESULT=new StatementSection(S1); RESULT.setLine(S1left); :}
			|
			(StatementArrMax) ARRMAX ArrMaxArrDesignator:A1 SEMI_COLON {: RESULT=new StatementArrMax(A1); RESULT.setLine(A1left); :} 	// ADDITIONAL
			|
			(StatementArrSort) ARRSORT ArrSortArrDesignator:A1 SEMI_COLON {: RESULT=new StatementArrSort(A1); RESULT.setLine(A1left); :}	// ADDITIONAL
			|
			(StatementLabelDeclare) LABEL Label:L1	SEMI_COLON {: RESULT=new StatementLabelDeclare(L1); RESULT.setLine(L1left); :}				// ADDITIONAL
			|	
			(StatementGotoLabel) GOTO Label:L1	SEMI_COLON {: RESULT=new StatementGotoLabel(L1); RESULT.setLine(L1left); :}					// ADDITIONAL
			;
			
			
			
// ~~~~~~~~~~~~~~~~~~~ WHILE STATEMENT ~~~~~~~~~~~~~~~~~~~
			
StatementWhileStart ::= (StatementWhileStart) WHILE {: RESULT=new StatementWhileStart(); :};



// ~~~~~~~~~~~~~~~~~~~ IF ELSE STATEMENT ~~~~~~~~~~~~~~~~~~~
	
IfStatement ::= (IfStatement) IfStatementStart:I1 L_PAREN ConditionInIf:C2 PlaceAfterIfCondition:P3 R_PAREN Statement:S4 PlaceAfterIfBlock:P5 {: RESULT=new IfStatement(I1, C2, P3, S4, P5); RESULT.setLine(I1left); :};

IfStatementStart ::= (IfStatementStart) IF {: RESULT=new IfStatementStart(); :};

PlaceAfterIfCondition ::= (PlaceAfterIfCondition) {: RESULT=new PlaceAfterIfCondition(); :} /* e */;

PlaceAfterIfBlock ::= (PlaceAfterIfBlock) {: RESULT=new PlaceAfterIfBlock(); :} /* e */;

ElseStatement ::= (ElseStatement) ElseStatementStart:E1 Statement:S2 PlaceAfterElseBlock:P3 {: RESULT=new ElseStatement(E1, S2, P3); RESULT.setLine(E1left); :};

ElseStatementStart ::= (ElseStatementStart) ELSE {: RESULT=new ElseStatementStart(); :};

PlaceAfterElseBlock ::= (PlaceAfterElseBlock) {: RESULT=new PlaceAfterElseBlock(); :} /* e */;



// ~~~~~~~~~~~~~~~~~~~ FOREACH STATEMENT ~~~~~~~~~~~~~~~~~~~
								
ForeachStatement ::= (ForeachStatement) ForeachStatementBeginning:F1 Statement:S2 R_PAREN {: RESULT=new ForeachStatement(F1, S2); RESULT.setLine(F1left); :};

ForeachStatementBeginning ::= (ForeachStatementBeginning) Designator:arrayDesignator DOT FOREACH L_PAREN ForeachVarDesignator:varDesignator ARROW {: RESULT=new ForeachStatementBeginning(arrayDesignator, varDesignator); RESULT.setLine(arrayDesignatorleft); :};

ForeachVarDesignator ::= (ForeachVarDesignator) IDENT:name {: RESULT=new ForeachVarDesignator(name); RESULT.setLine(nameleft); :};



// ~~~~~~~~~~~~~~~~~~~ PRINT STATEMENT ~~~~~~~~~~~~~~~~~~~

PrintNumConstOptional ::= (PrintNumConstOptionalExists) COMMA NUM_CONST:numConst {: RESULT=new PrintNumConstOptionalExists(numConst); RESULT.setLine(numConstleft); :}
						|
						(PrintNumConstOptionalEmpty) {: RESULT=new PrintNumConstOptionalEmpty(); :} /* e */
						;
						

// ~~~~~~~~~~~~~~~~~~~ DESIGNATOR STATEMENT ~~~~~~~~~~~~~~~~~~~
						
DesignatorStatement ::= (DesignatorStatementAssign) DesignatorAssignopExpr:D1 {: RESULT=new DesignatorStatementAssign(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementAction) DesignatorAction:D1 {: RESULT=new DesignatorStatementAction(D1); RESULT.setLine(D1left); :} 
					|
					(DesignatorStatementAssignArray) DesignatorStatementAssignArrayStart:D1 DesignatorListOptionalES:D2 R_SQUARE_BRACKET ASSIGN Designator:designator {: RESULT=new DesignatorStatementAssignArray(D1, D2, designator); RESULT.setLine(D1left); :}
					;
					
DesignatorStatementAssignArrayStart ::= (DesignatorStatementAssignArrayStart) L_SQUARE_BRACKET {: RESULT=new DesignatorStatementAssignArrayStart(); :};
					
DesignatorListOptionalES ::= (DesignatorListOptionalESExist) DesignatorOptional:D1 {: RESULT=new DesignatorListOptionalESExist(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorListOptionalESEmpty) DesignatorListOptionalES:D1 COMMA DesignatorOptional:D2 {: RESULT=new DesignatorListOptionalESEmpty(D1, D2); RESULT.setLine(D1left); :}
						;
										
DesignatorOptional ::= (DesignatorOptionalExist) Designator:D1 {: RESULT=new DesignatorOptionalExist(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorOptionalEmpty) {: RESULT=new DesignatorOptionalEmpty(); :} /* e */
					;
					
DesignatorAction ::= (DesignatorActionMethodCall) Designator:designator L_PAREN ActParsOptional:A1 R_PAREN {: RESULT=new DesignatorActionMethodCall(designator, A1); RESULT.setLine(designatorleft); :}
					|
					(DesignatorActionInc) Designator:designator INC {: RESULT=new DesignatorActionInc(designator); RESULT.setLine(designatorleft); :}
					|
					(DesignatorActionDec) Designator:designator DEC {: RESULT=new DesignatorActionDec(designator); RESULT.setLine(designatorleft); :}
					;
					
DesignatorAssignopExpr ::= (DesignatorAssignopExpression) Designator:designator Assignop:A1 Expr:expr {: RESULT=new DesignatorAssignopExpression(designator, A1, expr); RESULT.setLine(designatorleft); :}
						|
						(DesignatorAssignopExprError) error:e {: parser.report_error("Assignment operation error at line: " + eleft, null); :} {: RESULT=new DesignatorAssignopExprError(); :}
						;
						
						
						
						
// ~~~~~~~~~~~~~~~~~~~ ACT PARS ~~~~~~~~~~~~~~~~~~~
				
ActPars ::= (ActParsMultiple) ActPars:A1 COMMA Expr:expr {: RESULT=new ActParsMultiple(A1, expr); RESULT.setLine(A1left); :}
		|
		(ActParsSingle) Expr:expr {: RESULT=new ActParsSingle(expr); RESULT.setLine(exprleft); :}
		;
		
ActParsOptional ::= (ActParsOptionalExist) ActPars:A1 {: RESULT=new ActParsOptionalExist(A1); RESULT.setLine(A1left); :}
				|
				(ActParsOptionalEmpty) {: RESULT=new ActParsOptionalEmpty(); :} /* e */
				;
				
				
				
				
// ~~~~~~~~~~~~~~~~~~~ CONDITIONS ~~~~~~~~~~~~~~~~~~~

ConditionInIf ::= (ConditionInIfExists) Condition:C1 {: RESULT=new ConditionInIfExists(C1); RESULT.setLine(C1left); :}
				|
				(ConditionInIfError) error:e 
					{: 
						parser.syntax_error("Statement in If Condition error at line: " + eleft, null); 
						parser.log.info("Statement in If Condition error recovery successful."); 
					:} {: RESULT=new ConditionInIfError(); :}
				;

Condition ::= (ConditionMultiple) Condition:C1 PlaceAfterFirstConditionInOr:P2 OR CondTerm:C3 {: RESULT=new ConditionMultiple(C1, P2, C3); RESULT.setLine(C1left); :}
			|
			(ConditionSingle) CondTerm:C1 {: RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); :}
			;
			
PlaceAfterFirstConditionInOr ::= (PlaceAfterFirstConditionInOr) {: RESULT=new PlaceAfterFirstConditionInOr(); :} /* e */;
			
CondTerm ::= (CondTermMultiple) CondTerm:C1 PlaceAfterFirstConditionInAnd:P2 AND CondFact:C3 {: RESULT=new CondTermMultiple(C1, P2, C3); RESULT.setLine(C1left); :}
			|
			(CondTermSingle) CondFact:C1 {: RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); :}
			;
			
PlaceAfterFirstConditionInAnd ::= (PlaceAfterFirstConditionInAnd) {: RESULT=new PlaceAfterFirstConditionInAnd(); :} /* e */;

CondFact ::= (CondFactSingle) Expr:expr {: RESULT=new CondFactSingle(expr); RESULT.setLine(exprleft); :}
			|
			(CondFactMultipleEquality) Expr:exprLeft RelopEquality:R1 Expr:exprRight {: RESULT=new CondFactMultipleEquality(exprLeft, R1, exprRight); RESULT.setLine(exprLeftleft); :}
			|
			(CondFactMultipleComparaison) Expr:exprLeft RelopComparison:R1 Expr:exprRight {: RESULT=new CondFactMultipleComparaison(exprLeft, R1, exprRight); RESULT.setLine(exprLeftleft); :}
			;
			
			
			
// ~~~~~~~~~~~~~~~~~~~ EXPR ~~~~~~~~~~~~~~~~~~~

Expr ::= (ExprSingleMinus) MINUS Term:term {: RESULT=new ExprSingleMinus(term); RESULT.setLine(termleft); :}
		|
		(ExprSingle) Term:term {: RESULT=new ExprSingle(term); RESULT.setLine(termleft); :}
		|
		(ExprMultiple) Expr:expr Addop:A1 Term:term {: RESULT=new ExprMultiple(expr, A1, term); RESULT.setLine(exprleft); :}
		;
		
		
// ~~~~~~~~~~~~~~~~~~~ TERM ~~~~~~~~~~~~~~~~~~~
				
Term ::= (TermMultiple) Term:term Mulop:M1 Factor:factor {: RESULT=new TermMultiple(term, M1, factor); RESULT.setLine(termleft); :}
		|
		(TermSingle) Factor:factor {: RESULT=new TermSingle(factor); RESULT.setLine(factorleft); :}
		;
		
		
// ~~~~~~~~~~~~~~~~~~~ FACTOR ~~~~~~~~~~~~~~~~~~~

Factor ::= (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
		|
		(FactorDesignatorMethodCall) Designator:designator L_PAREN ActParsOptional:A1 R_PAREN {: RESULT=new FactorDesignatorMethodCall(designator, A1); RESULT.setLine(designatorleft); :}
		| 
		(FactorNumConst) NUM_CONST:N1 {: RESULT=new FactorNumConst(N1); RESULT.setLine(N1left); :}
		| 
		(FactorCharConst) CHAR_CONST:C1 {: RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); :}
		|
		(FactorBoolConst) BOOL_CONST:B1 {: RESULT=new FactorBoolConst(B1); RESULT.setLine(B1left); :}
		|
		(FactorNewArray) NEW Type:type L_SQUARE_BRACKET Expr:expr R_SQUARE_BRACKET {: RESULT=new FactorNewArray(type, expr); RESULT.setLine(typeleft); :}
		|
		(FactorExpr) L_PAREN Expr:E1 R_PAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
		;
		
		


// ~~~~~~~~~~~~~~~~~~~ DESIGNATOR ~~~~~~~~~~~~~~~~~~~

Designator ::= (DesignatorDot) Designator:designator DOT IDENT:field {: RESULT=new DesignatorDot(designator, field); RESULT.setLine(designatorleft); :}
			|
			(DesignatorSquareBrackets) DesignatorArray:D1 L_SQUARE_BRACKET Expr:expr R_SQUARE_BRACKET {: RESULT=new DesignatorSquareBrackets(D1, expr); RESULT.setLine(D1left); :}
			|
			(DesignatorSingle) IDENT:designatorName {: RESULT=new DesignatorSingle(designatorName); RESULT.setLine(designatorNameleft); :}
			;
			
DesignatorArray ::= (DesignatorArray) Designator:D1 {: RESULT=new DesignatorArray(D1); RESULT.setLine(D1left); :};




// ~~~~~~~~~~~~~~~~~~~ UTIL ~~~~~~~~~~~~~~~~~~~
			
Label ::= (Label) IDENT:labelName {: RESULT=new Label(labelName); RESULT.setLine(labelNameleft); :};

Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :};

Relop ::= (RelopTypeEquality) RelopEquality:R1 {: RESULT=new RelopTypeEquality(R1); RESULT.setLine(R1left); :}
		|
		(RelopTypeComparaison) RelopComparison:R1 {: RESULT=new RelopTypeComparaison(R1); RESULT.setLine(R1left); :}
		;
	
RelopEquality ::= (RelopEquals) EQUALS {: RESULT=new RelopEquals(); :}
				|
				(RelopNotEquals) NOT_EQUALS {: RESULT=new RelopNotEquals(); :}
				;
				
RelopComparison ::= (RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
					|
					(RelopGreaterEquals) GREATER_EQUALS {: RESULT=new RelopGreaterEquals(); :}
					|
					(RelopLess) LESS {: RESULT=new RelopLess(); :}
					|
					(RelopLessEquals) LESS_EQUALS {: RESULT=new RelopLessEquals(); :}
					;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		|
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		;
		
Mulop ::= (AddopMul) MUL {: RESULT=new AddopMul(); :}
		|
		(AddopDiv) DIV {: RESULT=new AddopDiv(); :}
		|
		(AddopMod) MOD {: RESULT=new AddopMod(); :}
		;
		
		
// ~~~~~~~~~~~~~~~~~~~~~~ ADDITIONAL ~~~~~~~~~~~~~~~~~~~~~~
		
ArrMaxArrDesignator ::= (ArrMaxArrDesignator) IDENT:name {: RESULT=new ArrMaxArrDesignator(name); RESULT.setLine(nameleft); :};

ArrSortArrDesignator ::= (ArrSortArrDesignator) IDENT:name {: RESULT=new ArrSortArrDesignator(name); RESULT.setLine(nameleft); :};

// ~~~~~~~~~~~~~~~~~~~~~~ /ADDITIONAL ~~~~~~~~~~~~~~~~~~~~~~

		
		