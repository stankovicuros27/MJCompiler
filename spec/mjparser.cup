// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IMPORTS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

parser code {:

	Logger log = Logger.getLogger(getClass());
	boolean errorDetected;
   
    // Redefined error handling methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
      errorDetected = true;
    }
  
    public void syntax_error(String message, Symbol cur_token) {
        report_error("\nSyntax error: " + message, cur_token);
        errorDetected = true;
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        errorDetected = true;
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
        errorDetected = true;
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	errorDetected = false;
:}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GRAMMAR ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




// ~~~~~~~~~~~~~~~~NONTERMINALS~~~~~~~~~~~~~~~~

nonterminal ProgramDeclListE, MethodDeclListE;
nonterminal ConstDecl, VarDecl, ClassDecl;
nonterminal ConstDeclInnerList;
nonterminal VarDeclInnerList, SquareBracketsOptional;
nonterminal ExtendsTypeOptional, ClassBody;
nonterminal VarDeclListE, ClassConstructorsAndMethodsDeclOptional;
nonterminal ConstructorDeclListE, ConstructorDecl;
nonterminal MethodReturnType, FormParsOptional, StatementListE;
nonterminal FormPars;
nonterminal Statement, MatchedStatement, UnmatchedStatement;
nonterminal Condition;
nonterminal DesignatorStatement, ExprOptional;
nonterminal DesignatorAction, DesignatorListOptionalES;
nonterminal ActParsOptional, Assignop;
nonterminal DesignatorList;
nonterminal ActPars;
nonterminal RelopExprOptional, Relop;
nonterminal TermAddopList, Addop;
nonterminal Mulop;
nonterminal ParenActParsOptional, NewTypeSuffix;
nonterminal Label;
nonterminal VarDeclGlobal, VarDeclInnerListGlobal;
nonterminal DesignatorAssignopExpr;
nonterminal StatementWhileStart;

nonterminal IfStatement, ElseStatement;

// Everything that needs to go inside Tab
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, Const, ClassName, MethodName, Designator, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, PrintNumConstOptional, CondFact, CondTerm;

nonterminal ConstDeclInnerListElement, VarDeclInnerListElement, FormParam, DesignatorOptional, ForeachStatement, ConditionInIf;
nonterminal DesignatorStatementAssignArrayStart;
nonterminal RelopComparaison, RelopEquality, StatementForeachStart;
nonterminal ForeachVar;


// ~~~~~~~~~~~~~~~~TERMINALS~~~~~~~~~~~~~~~~

// Keywords
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOREACH;

// Operators
terminal PLUS, MINUS, MUL, DIV, MOD, EQUALS, NOT_EQUALS, GREATER, GREATER_EQUALS, LESS, LESS_EQUALS, AND, OR, ASSIGN;
terminal INC, DEC, SEMI_COLON, COLON, COMMA, DOT, L_PAREN, R_PAREN, L_SQUARE_BRACKET, R_SQUARE_BRACKET, L_BRACE, R_BRACE, ARROW;

// Token types
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;



// ~~~~~~~~~~~~~~~~PRECEDENCE~~~~~~~~~~~~~~~~

precedence left ELSE;




// ~~~~~~~~~~~~~~~~RULES~~~~~~~~~~~~~~~~

Program ::= (Program) PROGRAM ProgramName:programName ProgramDeclListE L_BRACE MethodDeclListE R_BRACE;

ProgramName ::= (ProgramName) IDENT:programName;

ProgramDeclListE ::= (ProgramDeclListEConst) ProgramDeclListE ConstDecl
				|
				(ProgramDeclListEVar) ProgramDeclListE VarDeclGlobal
				|
				(ProgramDeclListEClass) ProgramDeclListE ClassDecl
				|
				(ProgramDeclListEEmpty) /* e */
				;
				
ConstDecl ::= (ConstDecl) CONST Type ConstDeclInnerList SEMI_COLON;

ConstDeclInnerList ::= (ConstDeclInnerListSingle) ConstDeclInnerListElement
			|
			(ConstDeclInnerListMultiple) ConstDeclInnerList COMMA ConstDeclInnerListElement
			;

ConstDeclInnerListElement ::= (ConstDeclInnerListElement) IDENT:constName ASSIGN Const;

Const ::= (ConstNum) NUM_CONST:value
		|
		(ConstBool) BOOL_CONST:value
		|
		(ConstChar) CHAR_CONST:value
		;
		
VarDeclGlobal ::= (VarDeclGlobalExists) VarDecl
				|
				(VarDeclGlobalError) error:e 
					{: 
						parser.syntax_error("Globar var declaration error at line: " + eleft, null); 
						parser.log.info("Global var declaration error recovery successful."); 
					:}
				;

VarDecl ::= (VarDecl) Type VarDeclInnerList SEMI_COLON;

//VarDeclInnerListGlobal ::= (VarDeclInnerListGlobalSingle) IDENT SquareBracketsOptional
//				|
//				(VarDeclInnerListGlobalMultiple) VarDeclInnerListGlobal COMMA IDENT SquareBracketsOptional
//				|
//				(VarDeclInnerListGlobalError) error:e {: parser.report_error("Globar var declaration error at line: " + eleft, null); :}
//				;

VarDeclInnerList ::= (VarDeclInnerListSingle) VarDeclInnerListElement
				|
				(VarDeclInnerListMultiple) VarDeclInnerList COMMA VarDeclInnerListElement
				;
				
VarDeclInnerListElement ::= (VarDeclInnerListElementVar) IDENT:varName
						|
						(VarDeclInnerListElementArray) IDENT:varName L_SQUARE_BRACKET R_SQUARE_BRACKET
						;

SquareBracketsOptional ::= (SquareBracketsOptionalExists) L_SQUARE_BRACKET R_SQUARE_BRACKET
						|
						(SquareBracketsOptionalEmpty) /* e */ 
						;
						
			
						
ClassDecl ::= (ClassDecl) CLASS ClassName:className ExtendsTypeOptional L_BRACE ClassBody R_BRACE;

ClassName ::= (ClassName) IDENT:className;

ExtendsTypeOptional ::= (ExtendsTypeOptionalExists) EXTENDS Type
					|
					(ExtendsTypeOptionalEmpty) /* e */
					|
					(ExtendsTypeOptionalError) error:e 
						{: 
							parser.syntax_error("Class extends type error at line: " + eleft, null); 
							parser.log.info("Class extends type error recovery successful."); 
						:}
					;

ClassBody ::= (ClassBody) VarDeclListE ClassConstructorsAndMethodsDeclOptional;

VarDeclListE ::= (VarDeclListEExists) VarDeclListE VarDecl
			|
			(VarDeclListEEmpty) /* e */
			;

ClassConstructorsAndMethodsDeclOptional ::= (ClassConstructorsAndMethodsDeclOptionalExists) L_BRACE /* ConstructorDeclListE */ MethodDeclListE R_BRACE
										|
										(ClassConstructorsAndMethodsDeclOptionalEmpty) /* e */
										;

// Level C
//ConstructorDeclListE ::= (ConstructorDeclListEExists) ConstructorDeclListE ConstructorDecl
//						|
//						(ConstructorDeclListEEmpty) /* e */
//						;
//
//ConstructorDecl ::= (ConstructorDeclEmpty) /* e */; // Level C


MethodDeclListE ::= (MethodDeclListEExists) MethodDeclListE MethodDecl
				|
				(MethodDeclListEEmpty) /* e */
				;

MethodDecl ::= (MethodDecl) MethodReturnType MethodName:methodName L_PAREN FormParsOptional R_PAREN VarDeclListE L_BRACE StatementListE R_BRACE;

MethodName ::= (MethodName) IDENT:MethodName;

MethodReturnType ::= (MethodReturnTypeHasType) Type:returnType
					|
					(MethodReturnTypeIsVoid) VOID
					;
					
FormParsOptional ::= (FormParsOptionalExists) FormPars
					|
					(FormParsOptionalEmpty) /* e */
					;
					
FormPars ::= (FormParsSingle) FormParam
			|
			(FormParsMultiple) FormPars COMMA FormParam
			|	
			(FormParsError) error:e 
				{: 
					parser.syntax_error("Formal parameter declaration error at line: " + eleft, null); 
					parser.log.info("Formal parameter declaration error recovery successful."); 
				:}
			;
			
FormParam ::= (FormParamVar) Type:type IDENT:paramName
			|
			(FormParamArray) Type:type IDENT:paramName L_SQUARE_BRACKET R_SQUARE_BRACKET
			;

Type ::= (Type) IDENT:typeName;

StatementListE ::= (StatementListEExists) StatementListE Statement
				|
				(StatementListEEmpty) /* e */
				;
				
Statement ::= (StatementDesignator) DesignatorStatement SEMI_COLON
			|
			(StatementIfElse) IfStatement ElseStatement
			|
			(StatementIf) IfStatement
			|
			(StatementWhile) StatementWhileStart L_PAREN Condition R_PAREN Statement
			|
			(StatementBreak) BREAK SEMI_COLON
			|
			(StatementContinue) CONTINUE SEMI_COLON
			|
			(StatementForeach) ForeachStatement SEMI_COLON
			|
			(StatementReturnExpr) RETURN Expr SEMI_COLON
			|
			(StatementReturnVoid) RETURN SEMI_COLON
			|
			(StatementRead) READ L_PAREN Designator R_PAREN SEMI_COLON
			|
			(StatementPrint) PRINT L_PAREN Expr PrintNumConstOptional R_PAREN SEMI_COLON
			|
			(StatementSection) L_BRACE StatementListE R_BRACE
			;
			
StatementWhileStart ::= (StatementWhileStart) WHILE;
			
IfStatement ::= (IfStatement) IF L_PAREN ConditionInIf R_PAREN Statement;

ElseStatement ::= (ElseStatement) ELSE Statement;
								
ForeachStatement ::= (ForeachStatement) Designator DOT StatementForeachStart L_PAREN ForeachVar:var ARROW Statement R_PAREN;

ForeachVar ::= (ForeachVar) IDENT:name;

StatementForeachStart ::= (StatementForeachStart) FOREACH;

PrintNumConstOptional ::= (PrintNumConstOptionalExists) COMMA NUM_CONST:numConst
						|
						(PrintNumConstOptionalEmpty) /* e */
						;
						
DesignatorStatement ::= (DesignatorStatementAssign) DesignatorAssignopExpr
					|
					(DesignatorStatementAction) DesignatorAction 
					|
					(DesignatorStatementAssignArray) DesignatorStatementAssignArrayStart DesignatorListOptionalES R_SQUARE_BRACKET ASSIGN Designator:designator
					;
					
DesignatorStatementAssignArrayStart ::= (DesignatorStatementAssignArrayStart) L_SQUARE_BRACKET;
					
DesignatorListOptionalES ::= (DesignatorListOptionalESExist) DesignatorOptional
						|
						(DesignatorListOptionalESEmpty) DesignatorListOptionalES COMMA DesignatorOptional
						;
										
DesignatorOptional ::= (DesignatorOptionalExist) Designator
					|
					(DesignatorOptionalEmpty) /* e */
					;
					
DesignatorAction ::= (DesignatorActionMethodCall) Designator:designator L_PAREN ActParsOptional R_PAREN
					|
					(DesignatorActionInc) Designator:designator INC
					|
					(DesignatorActionDec) Designator:designator DEC
					;
					
DesignatorAssignopExpr ::= (DesignatorAssignopExpression) Designator:designator Assignop Expr:expr
						|
						(DesignatorAssignopExprError) error:e {: parser.report_error("Assignment operation error at line: " + eleft, null); :}
						;
				
ActPars ::= (ActParsMultiple) ActPars COMMA Expr:expr
		|
		(ActParsSingle) Expr:expr
		;
		
ActParsOptional ::= (ActParsOptionalExist) ActPars
				|
				(ActParsOptionalEmpty) /* e */
				;

ConditionInIf ::= (ConditionInIfExists) Condition
				|
				(ConditionInIfError) error:e 
					{: 
						parser.syntax_error("Statement in If Condition error at line: " + eleft, null); 
						parser.log.info("Statement in If Condition error recovery successful."); 
					:}
				;

Condition ::= (ConditionMultiple) Condition OR CondTerm
			|
			(ConditionSingle) CondTerm
			;
			
CondTerm ::= (CondTermMultiple) CondTerm AND CondFact
			|
			(CondTermSingle) CondFact
			;

CondFact ::= (CondFactSingle) Expr:expr
			|
			(CondFactMultipleEquality) Expr:exprLeft RelopEquality Expr:exprRight
			|
			(CondFactMultipleComparaison) Expr:exprLeft RelopComparaison Expr:exprRight
			;

Expr ::= (ExprSingleMinus) MINUS Term:term
		|
		(ExprSingle) Term:term
		|
		(ExprMultiple) Expr:expr Addop Term:term
		;
				
Term ::= (TermMultiple) Term:term Mulop Factor:factor
		|
		(TermSingle) Factor:factor
		;
			
Factor ::= (FactorDesignator) Designator
		|
		(FactorDesignatorMethodCall) Designator:designator L_PAREN ActParsOptional R_PAREN
		| 
		(FactorNumConst) NUM_CONST
		| 
		(FactorCharConst) CHAR_CONST
		| 
		(FactorBoolConst) BOOL_CONST
		|
		(FactorNewArray) NEW Type:type L_SQUARE_BRACKET Expr:expr R_SQUARE_BRACKET
		|
		(FactorExpr) L_PAREN Expr R_PAREN
		;

NewTypeSuffix ::= (NewTypeSuffixArray) L_SQUARE_BRACKET Expr:expr R_SQUARE_BRACKET
				|
				(NewTypeSuffixClass) L_PAREN ActParsOptional R_PAREN
				;		
				
Designator ::= (DesignatorDot) Designator:designator DOT IDENT:field
			|
			(DesignatorSquareBrackets) Designator:designator L_SQUARE_BRACKET Expr:expr R_SQUARE_BRACKET
			|
			(DesignatorSingle) IDENT:designatorName
			;
			
Label ::= (Label) IDENT;

Assignop ::= (Assignop) ASSIGN;

Relop ::= (RelopTypeEquality) RelopEquality
		|
		(RelopTypeComparaison) RelopComparaison
		;
	
RelopEquality ::= (RelopEquals) EQUALS
				|
				(RelopNotEquals) NOT_EQUALS
				;
				
RelopComparaison ::= (RelopGreater) GREATER
					|
					(RelopGreaterEquals) GREATER_EQUALS
					|
					(RelopLess) LESS
					|
					(RelopLessEquals) LESS_EQUALS
					;

Addop ::= (AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;
		
Mulop ::= (AddopMul) MUL
		|
		(AddopDiv) DIV
		|
		(AddopMod) MOD
		;	
		
		
		