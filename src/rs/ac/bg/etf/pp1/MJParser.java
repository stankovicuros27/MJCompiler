
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jan 02 17:07:52 CET 2023
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Mon Jan 02 17:07:52 CET 2023
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\003\010\000\002\002\004\000\002\070" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\006\006\000\002\011\003\000" +
    "\002\011\005\000\002\071\005\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\065\003\000\002\065" +
    "\003\000\002\007\005\000\002\014\003\000\002\014\005" +
    "\000\002\072\004\000\002\015\004\000\002\015\002\000" +
    "\002\010\010\000\002\016\004\000\002\016\002\000\002" +
    "\016\003\000\002\017\004\000\002\020\004\000\002\020" +
    "\002\000\002\021\005\000\002\021\002\000\002\005\004" +
    "\000\002\005\002\000\002\024\013\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\002\000\002" +
    "\030\003\000\002\030\005\000\002\030\003\000\002\073" +
    "\005\000\002\012\003\000\002\027\004\000\002\027\002" +
    "\000\002\031\003\000\002\031\003\000\002\033\007\000" +
    "\002\033\011\000\002\032\004\000\002\032\011\000\002" +
    "\032\007\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\007\000\002\032\010\000\002\032\004" +
    "\000\002\032\005\000\002\075\012\000\002\036\003\000" +
    "\002\036\002\000\002\037\004\000\002\037\002\000\002" +
    "\035\004\000\002\035\007\000\002\042\003\000\002\042" +
    "\005\000\002\042\003\000\002\042\003\000\002\067\004" +
    "\000\002\067\003\000\002\043\003\000\002\043\005\000" +
    "\002\074\003\000\002\074\002\000\002\047\005\000\002" +
    "\047\003\000\002\044\003\000\002\044\002\000\002\076" +
    "\003\000\002\076\003\000\002\034\005\000\002\034\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\004\000" +
    "\002\052\004\000\002\052\002\000\002\040\004\000\002" +
    "\040\005\000\002\054\003\000\002\054\002\000\002\057" +
    "\005\000\002\057\003\000\002\061\004\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\005\000" +
    "\002\061\005\000\002\062\005\000\002\062\002\000\002" +
    "\063\005\000\002\063\005\000\002\041\005\000\002\041" +
    "\006\000\002\041\003\000\002\064\003\000\002\045\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\056\003\000\002\056\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\005\001\002\000\004\002\322\001" +
    "\002\000\004\061\007\001\002\000\014\003\ufffb\006\ufffb" +
    "\010\ufffb\053\ufffb\061\ufffb\001\002\000\014\003\uffff\006" +
    "\uffff\010\uffff\053\uffff\061\uffff\001\002\000\014\003\015" +
    "\006\021\010\022\053\020\061\012\001\002\000\004\061" +
    "\313\001\002\000\012\047\uffd7\051\uffd7\053\uffd7\061\uffd7" +
    "\001\002\000\014\003\ufff3\006\ufff3\010\ufff3\053\ufff3\061" +
    "\ufff3\001\002\000\014\003\ufffc\006\ufffc\010\ufffc\053\ufffc" +
    "\061\ufffc\001\002\000\014\003\ufff2\006\ufff2\010\ufff2\053" +
    "\ufff2\061\ufff2\001\002\000\014\003\ufffd\006\ufffd\010\ufffd" +
    "\053\ufffd\061\ufffd\001\002\000\014\003\ufffe\006\ufffe\010" +
    "\ufffe\053\ufffe\061\ufffe\001\002\000\010\017\uffe1\054\uffe1" +
    "\061\uffe1\001\002\000\004\061\037\001\002\000\004\061" +
    "\012\001\002\000\004\061\025\001\002\000\006\043\035" +
    "\045\034\001\002\000\004\040\027\001\002\000\006\043" +
    "\ufff9\045\ufff9\001\002\000\010\056\033\057\030\060\031" +
    "\001\002\000\006\043\ufff4\045\ufff4\001\002\000\006\043" +
    "\ufff6\045\ufff6\001\002\000\006\043\ufff7\045\ufff7\001\002" +
    "\000\006\043\ufff5\045\ufff5\001\002\000\004\061\025\001" +
    "\002\000\014\003\ufffa\006\ufffa\010\ufffa\053\ufffa\061\ufffa" +
    "\001\002\000\006\043\ufff8\045\ufff8\001\002\000\010\003" +
    "\041\020\040\053\uffe9\001\002\000\004\061\012\001\002" +
    "\000\004\053\uffe8\001\002\000\004\053\043\001\002\000" +
    "\010\053\uffe5\054\uffe5\061\uffe5\001\002\000\004\054\307" +
    "\001\002\000\010\053\050\054\uffe3\061\012\001\002\000" +
    "\010\053\uffe6\054\uffe6\061\uffe6\001\002\000\004\054\uffe7" +
    "\001\002\000\010\017\uffe1\054\uffe1\061\uffe1\001\002\000" +
    "\010\017\056\054\054\061\012\001\002\000\004\061\057" +
    "\001\002\000\004\061\uffdf\001\002\000\004\054\uffe4\001" +
    "\002\000\010\017\uffe2\054\uffe2\061\uffe2\001\002\000\004" +
    "\061\uffde\001\002\000\004\047\060\001\002\000\010\003" +
    "\063\050\uffdc\061\012\001\002\000\004\050\074\001\002" +
    "\000\004\061\070\001\002\000\006\045\uffd9\050\uffd9\001" +
    "\002\000\006\045\066\050\uffdd\001\002\000\006\045\uffdb" +
    "\050\uffdb\001\002\000\004\061\012\001\002\000\006\045" +
    "\uffda\050\uffda\001\002\000\010\045\uffec\050\uffec\051\071" +
    "\001\002\000\004\052\073\001\002\000\006\045\uffd8\050" +
    "\uffd8\001\002\000\010\043\uffed\045\uffed\050\uffed\001\002" +
    "\000\006\053\uffe5\061\uffe5\001\002\000\006\053\076\061" +
    "\012\001\002\000\030\005\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\021\uffd5\051\uffd5\053\uffd5\054\uffd5\061" +
    "\uffd5\001\002\000\030\005\120\011\105\012\101\014\110" +
    "\015\100\016\112\021\114\051\116\053\117\054\104\061" +
    "\102\001\002\000\004\047\303\001\002\000\004\047\277" +
    "\001\002\000\062\003\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\001\002\000\020\003\261\040\260\041\264\042\265\046" +
    "\257\047\263\051\127\001\002\000\010\017\uffe0\054\uffe0" +
    "\061\uffe0\001\002\000\004\047\223\001\002\000\004\043" +
    "\222\001\002\000\030\005\uffd6\011\uffd6\012\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\021\uffd6\051\uffd6\053\uffd6\054\uffd6\061" +
    "\uffd6\001\002\000\004\047\213\001\002\000\034\005\uffd4" +
    "\007\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4\021" +
    "\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4\061\uffd4\001\002" +
    "\000\022\013\uffa5\024\133\043\uffc4\047\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\001\002\000\034\005\uffd3\007\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\021\uffd3\050" +
    "\uffd3\051\uffd3\053\uffd3\054\uffd3\061\uffd3\001\002\000\004" +
    "\043\207\001\002\000\004\043\206\001\002\000\010\045" +
    "\uffb6\052\uffb6\061\102\001\002\000\030\005\uffd5\011\uffd5" +
    "\012\uffd5\014\uffd5\015\uffd5\016\uffd5\021\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\061\uffd5\001\002\000\004\043\121\001\002" +
    "\000\034\005\uffcd\007\uffcd\011\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\021\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd" +
    "\061\uffcd\001\002\000\030\005\120\011\105\012\101\014" +
    "\110\015\100\016\112\021\114\051\116\053\117\054\123" +
    "\061\102\001\002\000\034\005\uffc7\007\uffc7\011\uffc7\012" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\021\uffc7\050\uffc7\051\uffc7" +
    "\053\uffc7\054\uffc7\061\uffc7\001\002\000\006\045\201\052" +
    "\202\001\002\000\012\045\uffb7\046\130\051\127\052\uffb7" +
    "\001\002\000\006\045\uffb9\052\uffb9\001\002\000\020\013" +
    "\uffa5\024\133\047\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\001\002\000\004\061\131\001\002\000\062\003\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\001\002\000\010\023\147\024" +
    "\150\052\200\001\002\000\016\013\uffa6\047\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\001\002\000\016\013\135\047" +
    "\144\056\142\057\140\060\137\061\102\001\002\000\004" +
    "\061\012\001\002\000\052\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\043\uff9b\045\uff9b\046\130\047" +
    "\161\050\uff9b\051\127\052\uff9b\001\002\000\044\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\043\uffa1" +
    "\045\uffa1\050\uffa1\052\uffa1\001\002\000\044\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\043\uff9f\045" +
    "\uff9f\050\uff9f\052\uff9f\001\002\000\044\023\uffa8\024\uffa8" +
    "\025\154\026\155\027\153\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\043\uffa8\045\uffa8" +
    "\050\uffa8\052\uffa8\001\002\000\044\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\043\uffa0\045\uffa0\050" +
    "\uffa0\052\uffa0\001\002\000\044\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\043\uffa3\045\uffa3\050\uffa3" +
    "\052\uffa3\001\002\000\020\013\uffa5\024\133\047\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\010\023\147" +
    "\024\150\050\146\001\002\000\044\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\043\uff9d\045\uff9d\050" +
    "\uff9d\052\uff9d\001\002\000\016\013\uff8d\047\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\001\002\000\016\013\uff8c\047" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002\000\016" +
    "\013\135\047\144\056\142\057\140\060\137\061\102\001" +
    "\002\000\044\023\uffa7\024\uffa7\025\154\026\155\027\153" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\043\uffa7\045\uffa7\050\uffa7\052\uffa7\001\002" +
    "\000\016\013\uff89\047\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\001\002\000\016\013\uff8b\047\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\001\002\000\016\013\uff8a\047\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\001\002\000\016\013\135" +
    "\047\144\056\142\057\140\060\137\061\102\001\002\000" +
    "\044\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\043\uffa4\045\uffa4\050\uffa4\052\uffa4\001\002\000\044" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\043\uffa2\045\uffa2\050\uffa2\052\uffa2\001\002\000\022\013" +
    "\uffa5\024\133\047\uffa5\050\uffb2\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\001\002\000\006\045\166\050\uffb3\001\002\000" +
    "\004\050\165\001\002\000\012\023\147\024\150\045\uffb4" +
    "\050\uffb4\001\002\000\044\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\043\uff9c\045\uff9c\050\uff9c\052" +
    "\uff9c\001\002\000\020\013\uffa5\024\133\047\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\001\002\000\012\023\147\024" +
    "\150\045\uffb5\050\uffb5\001\002\000\006\047\173\051\172" +
    "\001\002\000\044\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\043\uff9e\045\uff9e\050\uff9e\052\uff9e\001" +
    "\002\000\020\013\uffa5\024\133\047\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\001\002\000\022\013\uffa5\024\133\047" +
    "\uffa5\050\uffb2\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002" +
    "\000\004\050\175\001\002\000\044\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\043\uff99\045\uff99\050" +
    "\uff99\052\uff99\001\002\000\010\023\147\024\150\052\177" +
    "\001\002\000\044\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\043\uff9a\045\uff9a\050\uff9a\052\uff9a\001" +
    "\002\000\062\003\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\001" +
    "\002\000\010\045\uffb6\052\uffb6\061\102\001\002\000\004" +
    "\040\203\001\002\000\004\061\102\001\002\000\010\043" +
    "\uffc0\046\130\051\127\001\002\000\006\045\uffb8\052\uffb8" +
    "\001\002\000\034\005\uffc8\007\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\021\uffc8\050\uffc8\051\uffc8\053\uffc8" +
    "\054\uffc8\061\uffc8\001\002\000\034\005\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\021\uffcc\050\uffcc" +
    "\051\uffcc\053\uffcc\054\uffcc\061\uffcc\001\002\000\010\023" +
    "\147\024\150\043\uffc5\001\002\000\004\043\212\001\002" +
    "\000\034\005\uffcb\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\021\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\061\uffcb\001\002\000\020\013\uffa5\024\133\047\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\012\023\147" +
    "\024\150\045\215\050\uffc2\001\002\000\004\060\221\001" +
    "\002\000\004\050\217\001\002\000\004\043\220\001\002" +
    "\000\034\005\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9" +
    "\061\uffc9\001\002\000\004\050\uffc3\001\002\000\034\005" +
    "\uffd0\007\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\021\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\061\uffd0\001" +
    "\002\000\022\003\225\013\uffa5\024\133\047\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\001\002\000\010\036\234\037" +
    "\uffae\050\uffae\001\002\000\004\050\uffb0\001\002\000\030" +
    "\023\147\024\150\030\252\031\247\032\244\033\250\034" +
    "\251\035\253\036\uffa9\037\uffa9\050\uffa9\001\002\000\010" +
    "\036\uffac\037\uffac\050\uffac\001\002\000\004\050\236\001" +
    "\002\000\006\037\232\050\uffb1\001\002\000\020\013\uffa5" +
    "\024\133\047\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001" +
    "\002\000\010\036\234\037\uffaf\050\uffaf\001\002\000\020" +
    "\013\uffa5\024\133\047\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\001\002\000\010\036\uffad\037\uffad\050\uffad\001\002" +
    "\000\026\005\120\011\105\012\101\014\110\015\100\016" +
    "\112\021\114\051\116\053\117\061\102\001\002\000\034" +
    "\005\uffd2\007\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\021\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2\061\uffd2" +
    "\001\002\000\034\005\uffd4\007\241\011\uffd4\012\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\021\uffd4\050\uffd4\051\uffd4\053\uffd4" +
    "\054\uffd4\061\uffd4\001\002\000\026\005\120\011\105\012" +
    "\101\014\110\015\100\016\112\021\114\051\116\053\117" +
    "\061\102\001\002\000\034\005\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\021\uffcf\050\uffcf\051\uffcf" +
    "\053\uffcf\054\uffcf\061\uffcf\001\002\000\034\005\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\021\uffd1" +
    "\050\uffd1\051\uffd1\053\uffd1\054\uffd1\061\uffd1\001\002\000" +
    "\020\013\uff91\024\uff91\047\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\001\002\000\020\013\uffa5\024\133\047\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\010\036\uffab" +
    "\037\uffab\050\uffab\001\002\000\020\013\uff92\024\uff92\047" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\001\002\000\020" +
    "\013\uff90\024\uff90\047\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\001\002\000\020\013\uff8f\024\uff8f\047\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\001\002\000\020\013\uff93\024" +
    "\uff93\047\uff93\056\uff93\057\uff93\060\uff93\061\uff93\001\002" +
    "\000\020\013\uff8e\024\uff8e\047\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\001\002\000\014\023\147\024\150\036\uffaa" +
    "\037\uffaa\050\uffaa\001\002\000\004\043\uffc1\001\002\000" +
    "\020\013\uffa5\024\133\047\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\001\002\000\006\022\270\061\131\001\002\000" +
    "\020\013\uff94\024\uff94\047\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\001\002\000\004\043\uffba\001\002\000\004\043" +
    "\uffbf\001\002\000\022\013\uffa5\024\133\047\uffa5\050\uffb2" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\004\043" +
    "\uffbd\001\002\000\004\043\uffbc\001\002\000\004\050\267" +
    "\001\002\000\004\043\uffbe\001\002\000\004\047\271\001" +
    "\002\000\004\061\272\001\002\000\004\055\273\001\002" +
    "\000\026\005\120\011\105\012\101\014\110\015\100\016" +
    "\112\021\114\051\116\053\117\061\102\001\002\000\004" +
    "\050\275\001\002\000\004\043\uffc6\001\002\000\010\023" +
    "\147\024\150\043\uffbb\001\002\000\020\013\uffa5\024\133" +
    "\047\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000" +
    "\006\037\232\050\301\001\002\000\026\005\120\011\105" +
    "\012\101\014\110\015\100\016\112\021\114\051\116\053" +
    "\117\061\102\001\002\000\034\005\uffce\007\uffce\011\uffce" +
    "\012\uffce\014\uffce\015\uffce\016\uffce\021\uffce\050\uffce\051" +
    "\uffce\053\uffce\054\uffce\061\uffce\001\002\000\004\061\102" +
    "\001\002\000\010\046\130\050\305\051\127\001\002\000" +
    "\004\043\306\001\002\000\034\005\uffca\007\uffca\011\uffca" +
    "\012\uffca\014\uffca\015\uffca\016\uffca\021\uffca\050\uffca\051" +
    "\uffca\053\uffca\054\uffca\061\uffca\001\002\000\014\003\uffeb" +
    "\006\uffeb\010\uffeb\053\uffeb\061\uffeb\001\002\000\004\053" +
    "\uffea\001\002\000\010\017\056\054\312\061\012\001\002" +
    "\000\004\002\001\001\002\000\010\043\uffec\045\uffec\051" +
    "\071\001\002\000\006\043\317\045\316\001\002\000\006" +
    "\043\ufff0\045\ufff0\001\002\000\004\061\313\001\002\000" +
    "\016\003\ufff1\006\ufff1\010\ufff1\053\ufff1\054\ufff1\061\ufff1" +
    "\001\002\000\006\043\uffef\045\uffef\001\002\000\006\043" +
    "\uffee\045\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\070\005\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\006\016\007\012\010\013\012\010\065" +
    "\015\001\001\000\006\014\313\072\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\310" +
    "\001\001\000\002\001\001\000\004\012\022\001\001\000" +
    "\006\011\023\071\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\041\001\001\000\004\012\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\043\020\044\001\001\000\002\001\001\000\010\007\045" +
    "\012\010\021\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\050\001\001\000\010\012\052\024\054" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\061\026\060\030\063\073\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\061\073" +
    "\066\001\001\000\002\001\001\000\004\015\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\074\001\001\000\006\007\045\012\010\001\001" +
    "\000\004\027\076\001\001\000\016\031\106\032\110\033" +
    "\112\035\105\041\102\075\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\254\045" +
    "\255\067\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\210\040\207\054\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\124\043\123\074\125\001\001\000\004\027\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\106\032\110\033\112\035\105\041\102\075\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\131\054\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\150\001\001\000" +
    "\002\001\001\000\010\041\135\057\140\061\142\001\001" +
    "\000\004\012\167\001\001\000\004\062\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\144\054" +
    "\133\001\001\000\004\056\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\135\057" +
    "\151\061\142\001\001\000\004\060\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\135\061\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\040\163\044\162\047\161\054\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\150\001\001" +
    "\000\002\001\001\000\006\040\166\054\133\001\001\000" +
    "\004\056\150\001\001\000\004\063\170\001\001\000\002" +
    "\001\001\000\006\040\175\054\133\001\001\000\012\040" +
    "\163\044\173\047\161\054\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\124\074\204\001\001" +
    "\000\002\001\001\000\004\041\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\213\054\133\001\001\000\006\037\215" +
    "\056\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\034\230\040\225\050\223\051\226\054" +
    "\133\076\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\052\245\053\244\056\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\225" +
    "\050\232\051\226\054\133\001\001\000\002\001\001\000" +
    "\010\040\225\051\234\054\133\001\001\000\002\001\001" +
    "\000\016\031\236\032\237\033\112\035\105\041\102\075" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\032\241\033\242\035\105\041\102\075\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\253\054\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\150\001\001\000\002\001" +
    "\001\000\006\040\275\054\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\040\163\044\265\047\161\054\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\273\032\110\033\112\035\105\041\102\075" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\150\001\001\000\014\034\277\040\225\050\223\051" +
    "\226\054\133\001\001\000\002\001\001\000\016\031\301" +
    "\032\110\033\112\035\105\041\102\075\114\001\001\000" +
    "\002\001\001\000\004\041\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\052\024\054\025\051\001\001" +
    "\000\002\001\001\000\004\015\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
   
    // Redefined error handling methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(String message, Symbol cur_token) {
        report_error("\nSyntax error: " + message, cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new AddopMod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new AddopDiv(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new AddopMul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopMinus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopPlus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= LESS_EQUALS 
            {
              Relop RESULT = null;
		 RESULT=new RelopLessEquals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new RelopLess(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Relop ::= GREATER_EQUALS 
            {
              Relop RESULT = null;
		 RESULT=new RelopGreaterEquals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new RelopGreater(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Relop ::= NOT_EQUALS 
            {
              Relop RESULT = null;
		 RESULT=new RelopNotEquals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Relop ::= EQUALS 
            {
              Relop RESULT = null;
		 RESULT=new RelopEquals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Assignop ::= ASSIGN 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Label ::= IDENT 
            {
              Label RESULT = null;
		 RESULT=new Label(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*Label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		 RESULT=new DesignatorSingle(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Designator ::= Designator L_SQUARE_BRACKET Expr R_SQUARE_BRACKET 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorMultipleExpr(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Designator ::= Designator DOT IDENT 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DesignatorMultipleIdent(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NewTypeSuffix ::= L_PAREN ActParsOptional R_PAREN 
            {
              NewTypeSuffix RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsOptional A1 = (ActParsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new NewTypeSuffixActPars(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*NewTypeSuffix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NewTypeSuffix ::= L_SQUARE_BRACKET Expr R_SQUARE_BRACKET 
            {
              NewTypeSuffix RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new NewTypeSuffixSquareBracket(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*NewTypeSuffix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ParenActParsOptional ::= 
            {
              ParenActParsOptional RESULT = null;
		 RESULT=new ParenActParsOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ParenActParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ParenActParsOptional ::= L_PAREN ActParsOptional R_PAREN 
            {
              ParenActParsOptional RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsOptional A1 = (ActParsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ParenActParsOptionalExist(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ParenActParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= L_PAREN Expr R_PAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= NEW Type NewTypeSuffix 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		NewTypeSuffix N2 = (NewTypeSuffix)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNew(T1, N2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= BOOL_CONST 
            {
              Factor RESULT = null;
		 RESULT=new FactorBoolConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= CHAR_CONST 
            {
              Factor RESULT = null;
		 RESULT=new FactorCharConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= NUM_CONST 
            {
              Factor RESULT = null;
		 RESULT=new FactorNumConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= Designator ParenActParsOptional 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ParenActParsOptional P2 = (ParenActParsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(D1, P2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= Factor 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermSingle(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMultiple(T1, M2, F3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MinusOptional ::= 
            {
              MinusOptional RESULT = null;
		 RESULT=new MinusOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MinusOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MinusOptional ::= MINUS 
            {
              MinusOptional RESULT = null;
		 RESULT=new MinusOptionalExist(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MinusOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprMultiple(E1, A2, T3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= MinusOptional Term 
            {
              Expr RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MinusOptional M1 = (MinusOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprSingle(M1, T2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RelopExprOptional ::= 
            {
              RelopExprOptional RESULT = null;
		 RESULT=new RelopExprOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*RelopExprOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RelopExprOptional ::= Relop Expr 
            {
              RelopExprOptional RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RelopExprOptionalExist(R1, E2); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*RelopExprOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFact ::= Expr RelopExprOptional 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RelopExprOptional R2 = (RelopExprOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFact(E1, R2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermMultiple(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= Condition OR CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionMultiple(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ConditionInIf ::= error 
            {
              ConditionInIf RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						parser.syntax_error("Statement in If Condition error at line: " + eleft, null); 
						parser.log.info("Statement in If Condition error recovery successful."); 
					 RESULT=new ConditionInIfError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*ConditionInIf*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ConditionInIf ::= Condition 
            {
              ConditionInIf RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionInIfSucess(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*ConditionInIf*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActParsOptional ::= 
            {
              ActParsOptional RESULT = null;
		 RESULT=new ActParsOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*ActParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActParsOptional ::= ActPars 
            {
              ActParsOptional RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsOptionalExist(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*ActParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActPars ::= Expr 
            {
              ActPars RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsSingle(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActPars ::= ActPars COMMA Expr 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsMultiple(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorOptional ::= 
            {
              DesignatorOptional RESULT = null;
		 RESULT=new DesignatorOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*DesignatorOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorOptional ::= Designator 
            {
              DesignatorOptional RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorOptionalExist(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*DesignatorOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorListOptionalES ::= DesignatorListOptionalES COMMA DesignatorOptional 
            {
              DesignatorListOptionalES RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorListOptionalES D1 = (DesignatorListOptionalES)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOptional D2 = (DesignatorOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorListOptionalESEmpty(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorListOptionalES*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorListOptionalES ::= DesignatorOptional 
            {
              DesignatorListOptionalES RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOptional D1 = (DesignatorOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorListOptionalESExist(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorListOptionalES*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DesignatorAssignopExpr ::= error 
            {
              DesignatorAssignopExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Assignment operation error at line: " + eleft, null);  RESULT=new DesignatorAssignopExprError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*DesignatorAssignopExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DesignatorAssignopExpr ::= Assignop Expr 
            {
              DesignatorAssignopExpr RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAssignopExpression(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*DesignatorAssignopExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorAction ::= DEC 
            {
              DesignatorAction RESULT = null;
		 RESULT=new DesignatorActionDec(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*DesignatorAction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorAction ::= INC 
            {
              DesignatorAction RESULT = null;
		 RESULT=new DesignatorActionInc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*DesignatorAction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorAction ::= L_PAREN ActParsOptional R_PAREN 
            {
              DesignatorAction RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsOptional A1 = (ActParsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorActionActPars(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*DesignatorAction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorAction ::= DesignatorAssignopExpr 
            {
              DesignatorAction RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorAssignopExpr D1 = (DesignatorAssignopExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorActionAssignop(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*DesignatorAction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DesignatorStatement ::= L_SQUARE_BRACKET DesignatorListOptionalES R_SQUARE_BRACKET ASSIGN Designator 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorListOptionalES D1 = (DesignatorListOptionalES)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D2 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementSquareBracket(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DesignatorStatement ::= Designator DesignatorAction 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorAction D2 = (DesignatorAction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementAction(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrintNumConstOptional ::= 
            {
              PrintNumConstOptional RESULT = null;
		 RESULT=new PrintNumConstOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*PrintNumConstOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrintNumConstOptional ::= COMMA NUM_CONST 
            {
              PrintNumConstOptional RESULT = null;
		 RESULT=new PrintNumConstOptionalExists(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*PrintNumConstOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprOptional ::= 
            {
              ExprOptional RESULT = null;
		 RESULT=new ExprOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ExprOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprOptional ::= Expr 
            {
              ExprOptional RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprOptionalExists(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ExprOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ForeachStatement ::= Designator DOT FOREACH L_PAREN IDENT ARROW Statement R_PAREN 
            {
              ForeachStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ForeachStatement(D1, S2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*ForeachStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MatchedStatement ::= L_BRACE StatementListE R_BRACE 
            {
              MatchedStatement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementListE S1 = (StatementListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedStatementSection(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MatchedStatement ::= ForeachStatement SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ForeachStatement F1 = (ForeachStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedStatementForeach(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MatchedStatement ::= PRINT L_PAREN Expr PrintNumConstOptional R_PAREN SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		PrintNumConstOptional P2 = (PrintNumConstOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedStatementPrint(E1, P2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MatchedStatement ::= READ L_PAREN Designator R_PAREN SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedStatementRead(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MatchedStatement ::= RETURN ExprOptional SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprOptional E1 = (ExprOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedStatementExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MatchedStatement ::= CONTINUE SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		 RESULT=new MatchedStatementContinue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MatchedStatement ::= BREAK SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		 RESULT=new MatchedStatementBreak(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MatchedStatement ::= WHILE L_PAREN Condition R_PAREN Statement 
            {
              MatchedStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStatementWhile(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MatchedStatement ::= IF L_PAREN ConditionInIf R_PAREN MatchedStatement ELSE MatchedStatement 
            {
              MatchedStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConditionInIf C1 = (ConditionInIf)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MatchedStatement M2 = (MatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MatchedStatement M3 = (MatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStatementIfElse(C1, M2, M3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MatchedStatement ::= DesignatorStatement SEMI_COLON 
            {
              MatchedStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedStatementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnmatchedStatement ::= IF L_PAREN ConditionInIf R_PAREN MatchedStatement ELSE UnmatchedStatement 
            {
              UnmatchedStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConditionInIf C1 = (ConditionInIf)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MatchedStatement M2 = (MatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		UnmatchedStatement U3 = (UnmatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedStatementIfElse(C1, M2, U3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*UnmatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnmatchedStatement ::= IF L_PAREN ConditionInIf R_PAREN Statement 
            {
              UnmatchedStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConditionInIf C1 = (ConditionInIf)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedStatementIf(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*UnmatchedStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= UnmatchedStatement 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		UnmatchedStatement U1 = (UnmatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementUnmatched(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= MatchedStatement 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MatchedStatement M1 = (MatchedStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementMatched(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatementListE ::= 
            {
              StatementListE RESULT = null;
		 RESULT=new StatementListEEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*StatementListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StatementListE ::= StatementListE Statement 
            {
              StatementListE RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementListE S1 = (StatementListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementListEExists(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*StatementListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= IDENT 
            {
              Type RESULT = null;
		 RESULT=new Type(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormParam ::= Type IDENT SquareBracketsOptional 
            {
              FormParam RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SquareBracketsOptional S2 = (SquareBracketsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamDerived1(T1, S2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*FormParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormPars ::= error 
            {
              FormPars RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					parser.syntax_error("Formal parameter declaration error at line: " + eleft, null); 
					parser.log.info("Formal parameter declaration error recovery successful."); 
				 RESULT=new FormParsError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormPars ::= FormPars COMMA FormParam 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParam F2 = (FormParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsMultiple(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormPars ::= FormParam 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParam F1 = (FormParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsSignle(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormParsOptional ::= 
            {
              FormParsOptional RESULT = null;
		 RESULT=new FormParsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*FormParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParsOptional ::= FormPars 
            {
              FormParsOptional RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsExists(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*FormParsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodReturnType ::= VOID 
            {
              MethodReturnType RESULT = null;
		 RESULT=new MethodReturnTypeIsVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodReturnType ::= Type 
            {
              MethodReturnType RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodReturnTypeHasType(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDecl ::= MethodReturnType IDENT L_PAREN FormParsOptional R_PAREN VarDeclListE L_BRACE StatementListE R_BRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		MethodReturnType M1 = (MethodReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormParsOptional F2 = (FormParsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclListE V3 = (VarDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementListE S4 = (StatementListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclListE ::= 
            {
              MethodDeclListE RESULT = null;
		 RESULT=new MethodDeclListEEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclListE ::= MethodDeclListE MethodDecl 
            {
              MethodDeclListE RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclListE M1 = (MethodDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclListEExists(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassConstructorsAndMethodsDeclOptional ::= 
            {
              ClassConstructorsAndMethodsDeclOptional RESULT = null;
		 RESULT=new ClassConstructorsAndMethodsDeclOptionalEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ClassConstructorsAndMethodsDeclOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassConstructorsAndMethodsDeclOptional ::= L_BRACE MethodDeclListE R_BRACE 
            {
              ClassConstructorsAndMethodsDeclOptional RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclListE M1 = (MethodDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassConstructorsAndMethodsDeclOptionalExists(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ClassConstructorsAndMethodsDeclOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclListE ::= 
            {
              VarDeclListE RESULT = null;
		 RESULT=new VarDeclListEEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*VarDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDeclListE ::= VarDeclListE VarDecl 
            {
              VarDeclListE RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclListE V1 = (VarDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclListEExists(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*VarDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassBody ::= VarDeclListE ClassConstructorsAndMethodsDeclOptional 
            {
              ClassBody RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclListE V1 = (VarDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassConstructorsAndMethodsDeclOptional C2 = (ClassConstructorsAndMethodsDeclOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassBody(V1, C2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*ClassBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtendsTypeOptional ::= error 
            {
              ExtendsTypeOptional RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							parser.syntax_error("Class extends type error at line: " + eleft, null); 
							parser.log.info("Class extends type error recovery successful."); 
						 RESULT=new ExtendsTypeError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ExtendsTypeOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExtendsTypeOptional ::= 
            {
              ExtendsTypeOptional RESULT = null;
		 RESULT=new ExtendsTypeEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ExtendsTypeOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExtendsTypeOptional ::= EXTENDS Type 
            {
              ExtendsTypeOptional RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExtendsTypeExists(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ExtendsTypeOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassDecl ::= CLASS IDENT ExtendsTypeOptional L_BRACE ClassBody R_BRACE 
            {
              ClassDecl RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ExtendsTypeOptional E1 = (ExtendsTypeOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassBody C2 = (ClassBody)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(E1, C2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SquareBracketsOptional ::= 
            {
              SquareBracketsOptional RESULT = null;
		 RESULT=new SquareBracketsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*SquareBracketsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SquareBracketsOptional ::= L_SQUARE_BRACKET R_SQUARE_BRACKET 
            {
              SquareBracketsOptional RESULT = null;
		 RESULT=new SquareBracketsExists(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*SquareBracketsOptional*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclInnerListElement ::= IDENT SquareBracketsOptional 
            {
              VarDeclInnerListElement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SquareBracketsOptional S1 = (SquareBracketsOptional)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclInnerListElementDerived1(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*VarDeclInnerListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclInnerList ::= VarDeclInnerList COMMA VarDeclInnerListElement 
            {
              VarDeclInnerList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclInnerList V1 = (VarDeclInnerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclInnerListElement V2 = (VarDeclInnerListElement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclInnerListMultiple(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*VarDeclInnerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclInnerList ::= VarDeclInnerListElement 
            {
              VarDeclInnerList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclInnerListElement V1 = (VarDeclInnerListElement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclInnerListSingle(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*VarDeclInnerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= Type VarDeclInnerList SEMI_COLON 
            {
              VarDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclInnerList V2 = (VarDeclInnerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclGlobal ::= error 
            {
              VarDeclGlobal RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						parser.syntax_error("Globar var declaration error at line: " + eleft, null); 
						parser.log.info("Global var declaration error recovery successful."); 
					 RESULT=new VarDeclGlobalError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*VarDeclGlobal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDeclGlobal ::= VarDecl 
            {
              VarDeclGlobal RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclGlobalExists(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*VarDeclGlobal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= BOOL_CONST 
            {
              Const RESULT = null;
		 RESULT=new BoolConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= CHAR_CONST 
            {
              Const RESULT = null;
		 RESULT=new CharConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Const ::= NUM_CONST 
            {
              Const RESULT = null;
		 RESULT=new NumConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclInnerListElement ::= IDENT ASSIGN Const 
            {
              ConstDeclInnerListElement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const C1 = (Const)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclInnerListElement(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ConstDeclInnerListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclInnerList ::= ConstDeclInnerList COMMA ConstDeclInnerListElement 
            {
              ConstDeclInnerList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclInnerList C1 = (ConstDeclInnerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDeclInnerListElement C2 = (ConstDeclInnerListElement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclInnerListMultiple(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstDeclInnerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclInnerList ::= ConstDeclInnerListElement 
            {
              ConstDeclInnerList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDeclInnerListElement C1 = (ConstDeclInnerListElement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclInnerListSingle(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstDeclInnerList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type ConstDeclInnerList SEMI_COLON 
            {
              ConstDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclInnerList C2 = (ConstDeclInnerList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclListE ::= 
            {
              ProgramDeclListE RESULT = null;
		 RESULT=new ProgramDeclListEEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclListE ::= ProgramDeclListE ClassDecl 
            {
              ProgramDeclListE RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramDeclListE P1 = (ProgramDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C2 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclListEClass(P1, C2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramDeclListE ::= ProgramDeclListE VarDeclGlobal 
            {
              ProgramDeclListE RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramDeclListE P1 = (ProgramDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclGlobal V2 = (VarDeclGlobal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclListEVar(P1, V2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramDeclListE ::= ProgramDeclListE ConstDecl 
            {
              ProgramDeclListE RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramDeclListE P1 = (ProgramDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclListEConst(P1, C2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclListE*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              ProgramName RESULT = null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object programName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ProgramName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName ProgramDeclListE L_BRACE MethodDeclListE R_BRACE 
            {
              Program RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramName P1 = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ProgramDeclListE P2 = (ProgramDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclListE M3 = (MethodDeclListE)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(P1, P2, M3); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

